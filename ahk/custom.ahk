; Generated by KLFC 1.5.7
; https://github.com/39aldo39/klfc

#MaxHotkeysPerInterval 200
#MaxThreadsPerHotkey 10

SendUps(ByRef modifiers) {
  for index, modifier in modifiers {
    if (modifier == "Caps")
      SetCapsLockState, off
    else if (modifier == "Num")
      SetNumLockState, off
    else if InStr(modifier, "Extend")
      %modifier% := false
    else
      Send {%modifier% Up}
  }
  modifiers := Object()
}

SendAsUnicode(string) {
  Result := ""
  Loop, Parse, string
    Result .= Format("{{}U+{:04x}{}}", Ord(A_LoopField))
  Send {Blind}%Result%
}

DeadKeys := ComObjCreate("Scripting.Dictionary")

DeadKey(baseChar, table, name := "") {
  Global ActiveDeadKey
  if (ActiveDeadKey != "") {
    NewActiveDeadKey := ComObjCreate("Scripting.Dictionary")
    for key in table {
      value := table.item(key)
      NewActiveDeadKey.item(key) := ActiveDeadKey.item(value)
    }
    result := ActiveDeadKey.item(name)
    if (IsObject(result)) {
      for key in result {
        value := result.item(key)
        NewActiveDeadKey.item(key) := value
      }
    } else if (result != "") {
      ActiveDeadKey := ""
      SendAsUnicode(result)
      Return
    }
    ActiveDeadKey := NewActiveDeadKey
    Return
  }
  ActiveDeadKey := table
  Input key, L1, {Esc}{F1}{F2}{F3}{F4}{F5}{F6}{F7}{F8}{F9}{F10}{F11}{F12}{Left}{Right}{Up}{Down}{Home}{End}{PgUp}{PgDn}{Del}{Ins}{BS}{PrintScreen}{Pause}{AppsKey}
  If InStr(ErrorLevel, "EndKey:") {
    ActiveDeadKey := ""
    value := SubStr(ErrorLevel, 8)
    Send {Blind}{%value%}
    SendAsUnicode(baseChar)
  } else if (ErrorLevel != "NewInput") {
    value := ActiveDeadKey.item(key)
    ActiveDeadKey := ""
    if (IsObject(value)) {
      DeadKey(baseChar, value)
    } else if (value != "") {
      SendAsUnicode(value)
    } else {
      SendAsUnicode(baseChar . key)
    }
  }
}

*SC029::Send {Blind}{VKc0SC029 DownR} ; QWERTY ~: ~
*SC029 up::Send {Blind}{VKc0SC029 Up}
*SC002::Send {Blind}{VK31SC002 DownR} ; QWERTY 1: 1
*SC002 up::Send {Blind}{VK31SC002 Up}
*SC003::Send {Blind}{VK32SC003 DownR} ; QWERTY 2: 2
*SC003 up::Send {Blind}{VK32SC003 Up}
*SC004::Send {Blind}{VK33SC004 DownR} ; QWERTY 3: 3
*SC004 up::Send {Blind}{VK33SC004 Up}
*SC005::Send {Blind}{VK34SC005 DownR} ; QWERTY 4: 4
*SC005 up::Send {Blind}{VK34SC005 Up}
*SC006::Send {Blind}{VK35SC006 DownR} ; QWERTY 5: 5
*SC006 up::Send {Blind}{VK35SC006 Up}
*SC007::Send {Blind}{VK36SC007 DownR} ; QWERTY 6: 6
*SC007 up::Send {Blind}{VK36SC007 Up}
*SC008::Send {Blind}{VK37SC008 DownR} ; QWERTY 7: 7
*SC008 up::Send {Blind}{VK37SC008 Up}
*SC009::Send {Blind}{VK38SC009 DownR} ; QWERTY 8: 8
*SC009 up::Send {Blind}{VK38SC009 Up}
*SC00a::Send {Blind}{VK39SC00a DownR} ; QWERTY 9: 9
*SC00a up::Send {Blind}{VK39SC00a Up}
*SC00b::Send {Blind}{VK30SC00b DownR} ; QWERTY 0: 0
*SC00b up::Send {Blind}{VK30SC00b Up}
*SC00c::Send {Blind}{VKbdSC00c DownR} ; QWERTY -: -
*SC00c up::Send {Blind}{VKbdSC00c Up}
*SC00d::Send {Blind}{VKbbSC00d DownR} ; QWERTY +: +
*SC00d up::Send {Blind}{VKbbSC00d Up}
*SC010::Send {Blind}{VK51SC010 DownR} ; QWERTY Q: Q
*SC010 up::Send {Blind}{VK51SC010 Up}
*SC011::Send {Blind}{VK57SC011 DownR} ; QWERTY W: W
*SC011 up::Send {Blind}{VK57SC011 Up}
*SC012::Send {Blind}{VK45SC012 DownR} ; QWERTY E: E
*SC012 up::Send {Blind}{VK45SC012 Up}
*SC013::Send {Blind}{VK52SC013 DownR} ; QWERTY R: R
*SC013 up::Send {Blind}{VK52SC013 Up}
*SC014::Send {Blind}{VK54SC014 DownR} ; QWERTY T: T
*SC014 up::Send {Blind}{VK54SC014 Up}
*SC015::Send {Blind}{VK59SC015 DownR} ; QWERTY Y: Y
*SC015 up::Send {Blind}{VK59SC015 Up}
*SC016::Send {Blind}{VK55SC016 DownR} ; QWERTY U: U
*SC016 up::Send {Blind}{VK55SC016 Up}
*SC017::Send {Blind}{VK49SC017 DownR} ; QWERTY I: I
*SC017 up::Send {Blind}{VK49SC017 Up}
*SC018::Send {Blind}{VK4fSC018 DownR} ; QWERTY O: O
*SC018 up::Send {Blind}{VK4fSC018 Up}
*SC019::Send {Blind}{VK50SC019 DownR} ; QWERTY P: P
*SC019 up::Send {Blind}{VK50SC019 Up}
*SC01a::Send {Blind}{VKdbSC01a DownR} ; QWERTY [: [
*SC01a up::Send {Blind}{VKdbSC01a Up}
*SC01b::Send {Blind}{VKddSC01b DownR} ; QWERTY ]: ]
*SC01b up::Send {Blind}{VKddSC01b Up}
*SC02b::Send {Blind}{VKdcSC02b DownR} ; QWERTY \: \
*SC02b up::Send {Blind}{VKdcSC02b Up}
*SC01e::Send {Blind}{VK41SC01e DownR} ; QWERTY A: A
*SC01e up::Send {Blind}{VK41SC01e Up}
*SC01f::Send {Blind}{VK53SC01f DownR} ; QWERTY S: S
*SC01f up::Send {Blind}{VK53SC01f Up}
*SC020::Send {Blind}{VK44SC020 DownR} ; QWERTY D: D
*SC020 up::Send {Blind}{VK44SC020 Up}
*SC021::Send {Blind}{VK46SC021 DownR} ; QWERTY F: F
*SC021 up::Send {Blind}{VK46SC021 Up}
*SC022::Send {Blind}{VK47SC022 DownR} ; QWERTY G: G
*SC022 up::Send {Blind}{VK47SC022 Up}
*SC023::Send {Blind}{VK48SC023 DownR} ; QWERTY H: H
*SC023 up::Send {Blind}{VK48SC023 Up}
*SC024::Send {Blind}{VK4aSC024 DownR} ; QWERTY J: J
*SC024 up::Send {Blind}{VK4aSC024 Up}
*SC025::Send {Blind}{VK4bSC025 DownR} ; QWERTY K: K
*SC025 up::Send {Blind}{VK4bSC025 Up}
*SC026::Send {Blind}{VK4cSC026 DownR} ; QWERTY L: L
*SC026 up::Send {Blind}{VK4cSC026 Up}
*SC027::Send {Blind}{VKbaSC027 DownR} ; QWERTY ;: ;
*SC027 up::Send {Blind}{VKbaSC027 Up}
*SC028::Send {Blind}{VKc0SC028 DownR} ; QWERTY ': ~
*SC028 up::Send {Blind}{VKc0SC028 Up}
*SC02c::Send {Blind}{VK5aSC02c DownR} ; QWERTY Z: Z
*SC02c up::Send {Blind}{VK5aSC02c Up}
*SC02d::Send {Blind}{VK58SC02d DownR} ; QWERTY X: X
*SC02d up::Send {Blind}{VK58SC02d Up}
*SC02e::Send {Blind}{VK43SC02e DownR} ; QWERTY C: C
*SC02e up::Send {Blind}{VK43SC02e Up}
*SC02f::Send {Blind}{VK56SC02f DownR} ; QWERTY V: V
*SC02f up::Send {Blind}{VK56SC02f Up}
*SC030::Send {Blind}{VK42SC030 DownR} ; QWERTY B: B
*SC030 up::Send {Blind}{VK42SC030 Up}
*SC031::Send {Blind}{VK4eSC031 DownR} ; QWERTY N: N
*SC031 up::Send {Blind}{VK4eSC031 Up}
*SC032::Send {Blind}{VK4dSC032 DownR} ; QWERTY M: M
*SC032 up::Send {Blind}{VK4dSC032 Up}
*SC033::Send {Blind}{VKbcSC033 DownR} ; QWERTY ,: ,
*SC033 up::Send {Blind}{VKbcSC033 Up}
*SC034::Send {Blind}{VKbeSC034 DownR} ; QWERTY .: .
*SC034 up::Send {Blind}{VKbeSC034 Up}
*SC035::Send {Blind}{VKbfSC035 DownR} ; QWERTY /: /
*SC035 up::Send {Blind}{VKbfSC035 Up}

; QWERTY ~
#if
SC029::Send {Blind}{U+007e} ; ~

; QWERTY 1
#if
SC002::Send {Blind}{U+0031} ; 1
+SC002::Send {Blind}{U+007e} ; ~

; QWERTY 2
#if
SC003::Send {Blind}{U+0032} ; 2

; QWERTY 3
#if
SC004::Send {Blind}{U+0033} ; 3

; QWERTY 4
#if
SC005::Send {Blind}{U+0034} ; 4
+SC005::Send {Blind}{U+0024} ; $

; QWERTY 5
#if
SC006::Send {Blind}{U+0035} ; 5
+SC006::Send {Blind}{U+0025} ; %

; QWERTY 6
#if
SC007::Send {Blind}{U+0036} ; 6
+SC007::Send {Blind}{U+2228} ; ∨

; QWERTY 7
#if
SC008::Send {Blind}{U+0037} ; 7
+SC008::Send {Blind}{U+0026} ; &

; QWERTY 8
#if
SC009::Send {Blind}{U+0038} ; 8
+SC009::Send {Blind}{U+002a} ; *

; QWERTY 9
#if
SC00a::Send {Blind}{U+0039} ; 9
+SC00a::Send {Blind}{U+0028} ; (

; QWERTY 0
#if
SC00b::Send {Blind}{U+0030} ; 0
+SC00b::Send {Blind}{U+0029} ; )

; QWERTY -
#if
SC00c::Send {Blind}{U+2200} ; ∀
+SC00c::Send {Blind}{U+0046} ; F

; QWERTY +
#if
SC00d::Send {Blind}{U+2203} ; ∃
+SC00d::Send {Blind}{U+0054} ; T

; QWERTY Q
#if
SC010::Send {Blind}{U+0051} ; Q

; QWERTY W
#if
SC011::Send {Blind}{U+0057} ; W

; QWERTY E
#if
SC012::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0045} ; E
} else {
  Send {Blind}{U+2203} ; ∃
}
Return
+SC012::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+2203} ; ∃
} else {
  Send {Blind}{U+0045} ; E
}
Return

; QWERTY R
#if
SC013::Send {Blind}{U+0052} ; R

; QWERTY T
#if
SC014::Send {Blind}{U+0054} ; T

; QWERTY Y
#if
SC015::Send {Blind}{U+0059} ; Y

; QWERTY U
#if
SC016::Send {Blind}{U+0055} ; U

; QWERTY I
#if
SC017::Send {Blind}{U+0049} ; I

; QWERTY O
#if
SC018::Send {Blind}{U+004f} ; O

; QWERTY P
#if
SC019::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0050} ; P
} else {
  Send {Blind}{U+003b} ; ;
}
Return
+SC019::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+003b} ; ;
} else {
  Send {Blind}{U+0050} ; P
}
Return

; QWERTY [
#if
SC01a::Send {Blind}{U+0028} ; (
+SC01a::Send {Blind}{U+002c} ; ,

; QWERTY ]
#if
SC01b::Send {Blind}{U+0029} ; )
+SC01b::Send {Blind}{U+003d} ; =

; QWERTY \
#if
SC02b::Send {Blind}{U+2228} ; ∨

; QWERTY A
#if
SC01e::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0041} ; A
} else {
  Send {Blind}{U+2200} ; ∀
}
Return
+SC01e::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+2200} ; ∀
} else {
  Send {Blind}{U+0041} ; A
}
Return

; QWERTY S
#if
SC01f::Send {Blind}{U+0053} ; S

; QWERTY D
#if
SC020::Send {Blind}{U+0044} ; D

; QWERTY F
#if
SC021::Send {Blind}{U+0046} ; F

; QWERTY G
#if
SC022::Send {Blind}{U+0047} ; G

; QWERTY H
#if
SC023::Send {Blind}{U+0048} ; H

; QWERTY J
#if
SC024::Send {Blind}{U+004a} ; J

; QWERTY K
#if
SC025::Send {Blind}{U+004b} ; K

; QWERTY L
#if
SC026::Send {Blind}{U+004c} ; L

; QWERTY ;
#if
SC027::Send {Blind}{U+0026} ; &
+SC027::Send {Blind}{U+003a} ; :

; QWERTY '
#if
SC028::Send {Blind}{U+007e} ; ~

; QWERTY Z
#if
SC02c::Send {Blind}{U+005a} ; Z

; QWERTY X
#if
SC02d::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0058} ; X
} else {
  Send {Blind}{U+2a33} ; ⨳
}
Return
+SC02d::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+2a33} ; ⨳
} else {
  Send {Blind}{U+0058} ; X
}
Return

; QWERTY C
#if
SC02e::Send {Blind}{U+0043} ; C

; QWERTY V
#if
SC02f::Send {Blind}{U+0056} ; V

; QWERTY B
#if
SC030::Send {Blind}{U+0042} ; B

; QWERTY N
#if
SC031::Send {Blind}{U+004e} ; N

; QWERTY M
#if
SC032::Send {Blind}{U+004d} ; M

; QWERTY ,
#if
SC033::Send {Blind}{U+2194} ; ↔

; QWERTY .
#if
SC034::Send {Blind}{U+2192} ; →
+SC034::Send {Blind}{U+002e} ; .

; QWERTY /
#if
SC035::Send {Blind}{U+002f} ; /
+SC035::Send {Blind}{U+003b} ; ;
